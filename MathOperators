local Math = {}

Math.Basic = {}
Math.Bitwise = {}
Math.Advanced = {}
Math.Vector = {}
Math.Angles = {}
Math.PhysicalEquations = {}
Math.Pythegorean = {}
Math.Mod = {}
Math.Matrix = {}
Math.Polynomial = {}
Math.Statistic = {}
Math.Complex = {}
Math.Quaternion = {}
Math.Fourier = {}
Math.Prime = {}
Math.Graph = {}
Math.Crypto = {}
Math.Numerical = {}

Math.Basic.lerp = function(a, b, alpha)
	return a + (b - a) * alpha
end

Math.Basic.numbersBetween = function(a, b)
	local numbersBetween = {}
	for i = a, b, 1 do
		table.insert(numbersBetween, i)
	end
	return numbersBetween
end

Math.Basic.sumOfAllNumbersBetweenOneAnd = function(b)
	return (1 + b) * (b / 2)
end

Math.Basic.joinNumbers = function(a, b)
	return tostring(a ..b)
end

Math.Basic.digitAofNumber = function(a, b)
	return string.sub(tostring(b), a, a)
end

Math.Advanced.Canonball = function(Pos1, Pos2, Vel, Time, Gravity, AssemblyMass)
	return (((Pos1 - Pos2) / Time) + Vector3.new(0, Gravity * Time * 0.5, 0)) * AssemblyMass
end

Math.Advanced.truncate = function(b)
	local a, c = math.modf(b)
	return a, c
end

Math.Basic.factorial = function(n)
	local a = 0
	for i = n, 1, -1 do
		if i == n then
			a = n
		else
			a *= i
		end
	end
	return a
end

Math.Vector.distance3D = function(x1, y1, z1, x2, y2, z2)
	local dx = x2 - x1
	local dy = y2 - y1
	local dz = z2 - z1
	return math.sqrt(dx * dx + dy * dy + dz * dz)
end

Math.Vector.distance3D2 = function(x1, y1, z1, x2, y2, z2)
	local dx = x2 - x1
	local dy = y2 - y1
	local dz = z2 - z1
	return dx, dy, dz
end

Math.Vector.vectorMagnitude = function(x, y, z)
	return math.sqrt(x * x + y * y + z * z)
end

Math.Vector.dotProduct = function(ax, ay, az, bx, by, bz)
	return ax * bx + ay * by + az * bz
end

Math.Angles.angleBetweenVectorsInRadians = function(ax, ay, az, bx, by, bz)
	local dot = Math.Vector.dotProduct(ax, ay, az, bx, by, bz)
	local magA = Math.Vector.vectorMagnitude(ax, ay, az)
	local magB = Math.Vector.vectorMagnitude(bx, by, bz)
	if magA == 0 or magB == 0 then
		error("Cannot calculate angle with a zero-length vector.")
	end
	local cosTheta = dot / (magA * magB)
	cosTheta = math.max(-1, math.min(1, cosTheta))
	return math.acos(cosTheta)
end

Math.Angles.angleBetweenVectorsInRadians = function(ax, ay, az, bx, by, bz)
	local dot = Math.Vector.dotProduct(ax, ay, az, bx, by, bz)
	local magA = Math.Vector.vectorMagnitude(ax, ay, az)
	local magB = Math.Vector.vectorMagnitude(bx, by, bz)
	if magA == 0 or magB == 0 then
		error("Cannot calculate angle with a zero-length vector.")
	end
	local cosTheta = dot / (magA * magB)
	cosTheta = math.max(-1, math.min(1, cosTheta))
	return cosTheta
end

Math.Bitwise.bitwise_rshift = function(a, n)
	return math.floor(a / (2 ^ n))
end

Math.Bitwise.bitwise_lshift = function(a, n)
	return a * (2 ^ n)
end

Math.Bitwise.bitwise_not = function(a)
	local result = 0
	local bit = 1
	while a > 0 do
		if a % 2 == 0 then
			result = result + bit
		end
		a = math.floor(a / 2)
		bit = bit * 2
	end
	return result
end

Math.Bitwise.bitwise_xor = function(a, b)
	local result = 0
	local bit = 1
	while a > 0 or b > 0 do
		if (a % 2 ~= b % 2) then
			result = result + bit
		end
		a = math.floor(a / 2)
		b = math.floor(b / 2)
		bit = bit * 2
	end
	return result
end

Math.Bitwise.bitwise_or = function(a, b)
	local result = 0
	local bit = 1
	while a > 0 or b > 0 do
		if (a % 2 == 1) or (b % 2 == 1) then
			result = result + bit
		end
		a = math.floor(a / 2)
		b = math.floor(b / 2)
		bit = bit * 2
	end
	return result
end

Math.Bitwise.bitwise_and = function(a, b)
	local result = 0
	local bit = 1
	while a > 0 and b > 0 do
		if (a % 2 == 1) and (b % 2 == 1) then
			result = result + bit
		end
		a = math.floor(a / 2)
		b = math.floor(b / 2)
		bit = bit * 2
	end
	return result
end

Math.Pythegorean.pythagorean = function(a, b)
	if a < 0 or b < 0 then
		error("Side lengths must be non-negative.")
	end
	return math.sqrt(a * a + b * b)
end

Math.Pythegorean.pythagorean3D = function(x, y, z)
	if x < 0 or y < 0 or z < 0 then
		error("Side lengths must be non-negative.")
	end
	return math.sqrt(x * x + y * y + z * z)
end

Math.Mod.mod_add = function(a, b, m)
	return ((a + b) % m + m) % m
end

Math.Mod.mod_sub = function(a, b, m)
	return ((a - b) % m + m) % m -- Ensures positive result
end

Math.Mod.mod_mul = function(a, b, m)
	return ((a * b) % m + m) % m -- Ensures positive result
end

Math.Advanced.gcd = function(a, b)
	while b ~= 0 do
		a, b = b, a % b
	end
	return a
end

Math.Mod.mod_inverse = function(b, m)
	local a, x0, x1, m0 = b, 0, 1, m
	if Math.Advanced.gcd(b, m) ~= 1 then
		error("Modular inverse does not exist for these values.")
	end
	while a > 1 do
		local q = math.floor(a / m)
		a, m = m, a % m
		x0, x1 = x1 - q * x0, x0
	end
	return (x1 + m0) % m0
end

Math.Mod.mod_div = function(a, b, m)
	local inv_b = Math.Mod.mod_inverse(b, m)
	return Math.Mod.mod_mul(a, inv_b, m)
end

Math.Advanced.permutations = function(n, r)
	if n < 0 or r < 0 or r > n then
		error("Invalid inputs: ensure that 0 <= r <= n.")
	end
	return Math.Basic.factorial(n) / Math.Basic.factorial(n - r)
end

Math.Advanced.combinations = function(n, r)
	if n < 0 or r < 0 or r > n then
		error("Invalid inputs: ensure that 0 <= r <= n.")
	end
	return Math.Basic.factorial(n) / (Math.Basic.factorial(r) * Math.Basic.factorial(n - r))
end

Math.Advanced.lcm = function(a, b)
	if a == 0 or b == 0 then
		return 0 -- LCM of zero with any number is zero
	end
	return math.abs(a * b) / Math.Advanced.gcd(a, b)
end

Math.Clock = function(timer)
	local String = nil
	local hours = nil
	local minutes = nil
	local seconds = math.fmod(math.floor(timer), 60)
	if math.fmod(math.floor(timer / 3600), 3600) == 0 then
	else
		hours = math.fmod(math.floor(timer / 3600), 3600)
	end
	if math.fmod(math.floor(timer / 60), 60) == 0 then
	else
		minutes = math.fmod(math.floor(timer / 60), 60)
	end
	if hours ~= nil then
		String = tostring(hours)
	end
	if typeof(minutes) == "number" then
		if minutes <= 10 then
			minutes = "0" ..minutes
		end
	end
	if typeof(seconds) == "number" then
		if seconds <= 10 then
			seconds = "0" ..seconds
		end
	end
	if minutes ~= nil then
		if hours ~= nil then
			String = String .. ":" .. minutes .. ":" .. seconds
		else
			String = minutes .. ":" .. seconds
		end
	else
		String = seconds
	end
	return String
end

Math.Vector.Distance2D = function(x1, y1, x2, y2)
	local dx = x2 - x1
	local dy = y2 - y1
	return math.sqrt(dx * dx + dy * dy)
end

Math.Vector.Distance2D2 = function(x1, y1, x2, y2)
	local dx = x2 - x1
	local dy = y2 - y1
	return dx, dy
end

Math.Vector.dot = function(v1, v2)
	return v1.x * v2.x + v1.y * v2.y + (v1.z or 0) * (v2.z or 0)
end

Math.Vector.normalize = function(v)
	local mag = Math.Vector.vectorMagnitude(v)
	return {x = v.x / mag, y = v.y / mag, z = (v.z or 0) / mag}
end

Math.Matrix.multiply = function(a, b)
	local result = {}
	for i = 1, #a do
		result[i] = {}
		for j = 1, #b[1] do
			result[i][j] = 0
			for k = 1, #b do
				result[i][j] = result[i][j] + a[i][k] * b[k][j]
			end
		end
	end
	return result
end

Math.Polynomial.evaluate = function(coeffs, x)
	local result = 0
	for i = #coeffs, 1, -1 do
		result = result * x + coeffs[i]
	end
	return result
end

Math.Statistic.mean = function	(data)
	local sum = 0
	for _, v in ipairs(data) do
		sum = sum + v
	end
	return sum / #data
end

Math.Statistic.median = function(data)
	table.sort(data)
	local n = #data
	if n % 2 == 0 then
		return (data[n / 2] + data[n / 2 + 1]) / 2
	else
		return data[math.ceil(n / 2)]
	end
end

Math.Complex.add = function(c1, c2)
	return {real = c1.real + c2.real, imag = c1.imag + c2.imag}
end

Math.Complex.multiply = function(c1, c2)
	return {
		real = c1.real * c2.real - c1.imag * c2.imag,
		imag = c1.real * c2.imag + c1.imag * c2.real
	}
end

Math.Quaternion.multiply = function(q1, q2)
	return {
		w = q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z,
		x = q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,
		y = q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x,
		z = q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w
	}
end

Math.Quaternion.normalize = function(q)
	local mag = math.sqrt(q.w^2 + q.x^2 + q.y^2 + q.z^2)
	return {w = q.w / mag, x = q.x / mag, y = q.y / mag, z = q.z / mag}
end

Math.Fourier.dft = function(signal)
	local N = #signal
	local result = {}
	for k = 0, N - 1 do
		local real, imag = 0, 0
		for n = 0, N - 1 do
			local angle = 2 * math.pi * k * n / N
			real = real + signal[n + 1] * math.cos(angle)
			imag = imag - signal[n + 1] * math.sin(angle)
		end
		result[k + 1] = {real = real, imag = imag}
	end
	return result
end

Math.Prime.is_prime = function(n)
	if n < 2 then return false end
	for i = 2, math.sqrt(n) do
		if n % i == 0 then return false end
	end
	return true
end

Math.Prime.generate = function(limit)
	local result = {}
	for i = 2, limit do
		if Math.Prime.is_prime(i) then
			table.insert(result, i)
		end
	end
	return result
end

Math.Graph.dijkstra = function(edges, start)
	local dist = {}
	local visited = {}
	for node, _ in pairs(edges) do
		dist[node] = math.huge
		visited[node] = false
	end
	dist[start] = 0

	while true do
		local current, minDist = nil, math.huge
		for node, d in pairs(dist) do
			if not visited[node] and d < minDist then
				current, minDist = node, d
			end
		end
		if not current then break end
		visited[current] = true

		for neighbor, cost in pairs(edges[current]) do
			dist[neighbor] = math.min(dist[neighbor], dist[current] + cost)
		end
		task.wait()
	end
	return dist
end

Math.Crypto.caesar_encrypt = function(text, shift)
	local result = {}
	for i = 1, #text do
		local char = text:sub(i, i)
		if char:match("%a") then
			local base = char:match("%l") and 97 or 65
			table.insert(result, string.char((char:byte() - base + shift) % 26 + base))
		else
			table.insert(result, char)
		end
	end
	return table.concat(result)
end

Math.Crypto.caesar_decrypt = function(text, shift)
	return Math.Crypto.caesar_encrypt(text, -shift)
end

Math.Numerical.newton_raphson = function(f, df, x0, tol, max_iter)
	tol = tol or 1e-7
	max_iter = max_iter or 100
	local x = x0
	for i = 1, max_iter do
		local fx = f(x)
		if math.abs(fx) < tol then return x end
		x = x - fx / df(x)
	end
	error("Newton-Raphson method did not converge.")
end

return Math
